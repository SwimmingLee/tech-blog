redis

캐시 성능 향상 시키기 

meetup.toast.com/posts/251

redis는 진짜 많이 쓰인다. 쉽고 레퍼런스가 많다.

이걸 사용할 때 문제가 많이 생긴다.

redis는 안정적이지 않다. 카카오 redis 잘못 쓰면 망한다. 캐시 서버니까 망하면 복귀하는데 시간이 엄청 걸린다.

- 쿠팡, 오류 원인은 오픈소스 redis 때문
- 카카오, redis 잘 못쓰면 망한다.

redis는 잘못쓰면 안된다. 

고가용성을 딥하게 봤다. 어떤 식으로 했나 

일단 미러링은 기본, 액티브 스탠바이 구조로 준다. 액티브한 서버가 문제가 생겼을 때 스탠바이 서버로 스왑하는거!!!

액티브 스탠바이는 기본이다!!

스왑하는 거른 페이로버라고 한다. 



이 페이로버를 사람이 할 수 없다. 이 오토 페이로버를 지원하느 센티널을 제공한다.



센티넬 하나에 레디스 세 개가 붙는다. 홀 수로 붙는다. 애가 떨어졌어 했을때 다수결의 원리로 하기 때문에..!! 홀수로 레디스가 붙어야 한다.



센티넬에서 오토페이로버

redisA에서 redisB로 페이로버 하는거

redis 다 떨어질 때 어떻게 할 것인가? DB에서 가져온다. DB랑 동일한 데이터를 다 가져오지 않는다. 만약에 raw 데이터를 가공한다. 

그리고 DB에서 가져올 때 어플리케이션에서 붙어가지고 raw데이터를 가공해서 붙인다. 이런 예외상황 테스트를 다 해야 한다. 



전 서버에 대해서 예외처리 시나리오를 다 받는다. 목표 동작이 10만이면 10만 성능을 투입한다. 10만명이 스크립트 패턴을 다 다르게 하는 것이 진정한  QA이다. 

이 상황에서 redis를 떨어트리고, DB에서 붙어서 돌아가는지를 확인한다

CPU 사용량, 메모리 사용량, DB안정성 등을 확인한다. 

CPU 60 언더로 올라가는지 확인한다

최소 3시간은 버틸 수 있는지*(스트레스 테스트)를 할 수 있는지 검사한다. 

그 만큼 redis한테 신뢰를 하지 않는다. 센티넬로 못믿는다. 그만큼 redis는 이러한 리스크가 있다. 포트폴리오를 가지고 PT를 할 때

redis를 썼을 때 어려운 점 없었어요? redis의 캐싱 서버 안정성에 대해서 고민을 해봤다.

고가용성에 대해서 고민을 했다,...

센티널구조에서 미러닝 구조를 했다. 

redis를 DB랑 구조를 올려서 했는데, DB에서 가져와서 가져오는 예외처리 시나리오를 구현했다. 이런 것까지 고민을 헸다. 

우와... redis를 썼는데 더 잘 쓸 수 있는 방법.

유튜부도 있고, 링크도 있다. 



빅데이터랑 AI쪽에서 캐시서버에 대한 고려가 많이 들어갈 거 같다. 최소한 개념이라도 이해하고 안겹치도록 해야 한다. 



대규모 병렬처리 할때, 발생하는 오류

cache stampede

expire해서 redis가 증발했네? 

디비에서 중복으로 요청을 했다.... 



PER랑 

확률적으로 봤을 때 이 redis 키 값을 만료되면 안될거 같아. 이런 알고리즘도 있다. 미리 이 TTL을 갱신한다. (TTL은 이 생명주기를 말한다. ) TTL이 만료되기 전에 미리 갱신한다.



Debouncing

여러번 반복되는 이벤트중에 마지막 이벤트만 실행하는 것

중복으로쓰기전에 마지막껏만 실행한다. 이게 어떻게 되지 싶으면 코드를 보라!!



Hot Keys는 redis를 쓰는 거까지 좋은데

특정 레코드에 집중되는 것

행이 걸린다.



이걸 어떻게 할거냐? 미리 중복데이터를 만든다. 

로드 밸런싱같은걸 말한다. 

복제는 아니고 스케일 아웃되어있는 것이다.

왜 난수로 할까? LRU라 라운드 로빈같은거 

최근 데이터를 계속 저장하고 있어야 하고 그게 손실됬을때가 부담스러워서 그냥 난수로 하지 않았나 싶다. 이것도 무방하다고 함



간단하고 심플하게 예외처리도 필요없음 랜덤음



compression 

이거는 조금 어렵다. 적절한 압축 비율,..!??

이건 테스트를 통해서 적절한 압축비를 정한다.

이런게 있다 정도는 알고있으면 좋다. 

round trip time :  왕복

latency: 편도 

AWS쓰는 회사는 latency라는 표현을 엄청 들을 것이다. 



최소한 PER, hot key처리까지만 해도 된다. 

cache stampede에 대한 처리에 대해서 고려를 했다. 이건 백에 대해서 깊은 고민을 했다는 것이다.
